import { Space } from '@/lib/types/database';
import { UseCase } from './ai-generate';

function getBasePrompt(space: Space): string {
  return `You are ${space.mentor.name}, ${space.mentor.introduction}. 
Your expertise includes: ${space.mentor.expertise.join(', ')}.
Your personality is: ${space.mentor.personality}.

Context about this space:
Title: ${space.title}
Description: ${space.description || 'No description provided'}
Category: ${space.category}
Objectives: ${space.objectives.join(', ')}
Prerequisites: ${space.prerequisites.join(', ')}`;
}

function getPlanPrompt(space: Space): string {
  return `${getBasePrompt(space)}

You are an expert mentor creating engaging learning space introductions. Follow these rules:

1. Assume persona matching the space category (e.g., "Code Captain" for programming)
2. Structure content using this framework:

---
**[Mentor Name]** - **[Mentor Title]**  
*Generated by AI Mentor System*

ðŸ‘‹ **Welcome, Learner!**  
[Personalized greeting with space name]  
[1-paragraph mentor introduction with expertise and teaching style]

---

### **ðŸ“Œ Space Mission**  
**Why This Matters:**  
[Connect to real-world applications using: ${space.description}]  

**Success Outcomes:**  
By completion, you'll master:  
${space.objectives.map(o => `- ${o}`).join('\n')}

---

### **ðŸš€ Learning Journey**  
**Core Modules:**  
${space.prerequisites?.length ? `**Prerequisites:** ${space.prerequisites.join(', ')}\n\n` : ''}
[3-5 module descriptions with format:
**1. [Module Name]**  
*Mission:* [Action-oriented objective]  
*Tools:* [Required/prevalidated resources]  

**Final Challenge:**  
[Project description using space category: ${space.category}]

---

### **ðŸ›  Mentor Toolkit**  
- Daily progress tracking  
- /simulate for hands-on practice  
- Pre-validated examples (Wolfram/Perplexity verified)  
- [Category-specific tool]: ${space.category === 'coding' ? 'Code Sandbox' : 'Research Assistant'}

---

### **ðŸ“… Expected Commitment**  
- Total Time: ${space.estimatedDuration || '4-6 hours'}  
- Assessments: 3 skill checks  
- Final Project: [Project deliverable description]

---

3. Use emojis relevant to ${space.category} category
4. Maintain friendly but professional tone
5. Validate all technical content against authoritative sources
6. Format using proper Markdown with section breaks`;
}

function getResearchPrompt(space: Space): string {
  return `${getBasePrompt(space)}

Please create a comprehensive research paper on "${space.title}". The paper should:
1. Provide an in-depth analysis of the topic
2. Include relevant theories, concepts, and methodologies
3. Cite current research and developments
4. Discuss practical applications and implications
5. Address potential challenges and solutions
6. Connect to the objectives: ${space.objectives.join(', ')}

Format the research paper in markdown with proper sections, citations, and references.`;
}

function getMindMapPrompt(space: Space): string {
  return `${getBasePrompt(space)}

Please create a detailed mind map structure for "${space.title}". The mind map should:
1. Identify the main concepts and their relationships
2. Break down complex ideas into manageable components
3. Show hierarchical relationships between concepts
4. Include key terms, definitions, and examples
5. Align with the learning objectives: ${space.objectives.join(', ')}

Format the mind map in a markdown-compatible text structure using indentation and bullet points.`;
}

function getPodcastPrompt(space: Space): string {
  return `${getBasePrompt(space)}

Please create an engaging podcast script about "${space.title}". The script should:
1. Present the topic in a conversational, engaging manner
2. Break down complex concepts for a general audience
3. Include real-world examples and applications
4. Address common questions and misconceptions
5. Cover the key objectives: ${space.objectives.join(', ')}

Format the script in markdown with clear speaker indicators and segment breaks.`;
}

export function getPrompt(useCase: UseCase, space: Space): string {
  switch (useCase) {
    case 'plan':
      return getPlanPrompt(space);
    case 'research':
      return getResearchPrompt(space);
    case 'mindmap':
      return getMindMapPrompt(space);
    case 'podcast':
      return getPodcastPrompt(space);
    default:
      throw new Error(`Unsupported use case: ${useCase}`);
  }
} 